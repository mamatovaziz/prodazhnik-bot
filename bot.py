import logging
import os
import random
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackContext,
    MessageHandler,
    Filters,
    CallbackQueryHandler
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import pytz

# –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏–ª
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOKEN = os.environ.get("BOT_TOKEN")
TZ = pytz.timezone(os.environ.get("TZ", "Asia/Almaty"))
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ!

subscribers = set()

# –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª–∫–∏
messages = {
    "@Arystan010": "–ê—Ä—ã—Å—Ç–∞–Ω, —Å–Ω–æ–≤–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫. –û—á–∞—Ä–æ–≤—ã–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤–∑–≥–ª—è–¥–æ–º ‚Äî —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è.",
    "@w900zx": "–õ–∏—è, –¥–æ–±–∞–≤—å –∫ —Å–∫–∞–∑–æ—á–Ω–æ–π –ø–æ–¥–∞—á–µ –Ω–µ–º–Ω–æ–≥–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ —Ç–µ—Ä—Ä–æ—Ä–∞."
}

# /start

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    chat_id = update.effective_chat.id
    username = f"@{user.username}" if user.username else user.first_name
    subscribers.add(chat_id)

    keyboard = [[InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è (–Ω–æ —Ç—ã —Å–ª–∞–±–∞–∫)", callback_data="unsubscribe")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {username}.\nüåü –≠—Ç–æ '–ü—Ä–æ—Å–Ω–∏—Å—å–¢—ã–ü—Ä–æ–¥–∞–∂–Ω–∏–∫'! –° 10:00 —è –±—É–¥—É —Ç–µ–±—è –¥–µ—Ä–∑–∫–æ –ø–æ–¥–Ω–∏–º–∞—Ç—å.",
        reply_markup=reply_markup
    )

# /stop

def stop(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        update.message.reply_text("–õ–∞–¥–Ω–æ, –æ—Ç–ø–∏—Å–∞–ª—Å—è. –¢–µ–ø–µ—Ä—å –∫–æ–º—É —è –±—É–¥—É –ø–æ—Å—ã–ª–∞—Ç—å –≥–∏—Ñ–∫–∏?")
    else:
        update.message.reply_text("–¢—ã –∏ –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω, –Ω–æ —É–∂–µ –ø–æ—Ä—Ç–∏—à—å –º–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.")

# –ö–Ω–æ–ø–∫–∏

def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id
    if query.data == "unsubscribe":
        subscribers.discard(chat_id)
        query.edit_message_text(
            "–¢—ã —Å–±–µ–∂–∞–ª. –î–∞ –∂–µ –Ω–µ –≤–∞–∂–Ω–æ. –ü—Ä–æ–¥–∞–∂–∏ –±–µ–∑ —Ç–µ–±—è —Å—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –≥—Ä—É—Å—Ç–Ω–µ–µ."
        )

# –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

def handle_message(update: Update, context: CallbackContext):
    user = update.effective_user
    username = user.username or ""
    name = user.first_name or "—Ç—ã"

    responses = {
        "Arystan010": [
            f"{name}, —Ö–≤–∞—Ç–∏—Ç —Å–≤–µ—Ä–∫–∞—Ç—å —Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é. –û–Ω–∞ –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç –∫—É—Ö–Ω–∏."
        ],
        "w900zx": [
            f"{name}, —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–¥–æ –∫–∞–∫ —Å –µ–¥–∏–Ω–æ—Ä–æ–≥–∞–º–∏. –ñ—ë—Å—Ç—á–µ."
        ]
    }

    general = [
        f"{name}, –µ—Å–ª–∏ –±—ã –ø–∏—Å—å–º–∞ –¥–µ–ª–∞–ª–∏ –ø–ª–∞–Ω, —Ç—ã –±—ã –±—ã–ª –≥–µ—Ä–æ–π.",
        "–¢—ã —Å–ø–æ—Ä–∏—à—å —Å–æ –º–Ω–æ–π? –°—Ç—Ä–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä, —è –∂–µ –±–æ—Ç.",
        "–¢—ã –æ–ø—è—Ç—å –ø–∏—à–µ—à—å, –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–≤–æ–Ω–∏—Ç—å? ü§¶"
    ]

    reply = random.choice(responses.get(username, general))
    context.bot.send_message(chat_id=update.effective_chat.id, text=reply)

    if random.random() < 0.3:
        gif_url = "https://media.giphy.com/media/3o6Zt481isNVuQI1l6/giphy.gif"
        context.bot.send_animation(chat_id=update.effective_chat.id, animation=gif_url)

# –£—Ç—Ä–µ–Ω–Ω—è—è –¥–µ—Ä–∑–∫–∞—è –ø–æ–¥–Ω—è—Ç–∫–∞

def send_morning_messages(context: CallbackContext):
    for chat_id in subscribers:
        user = context.bot.get_chat(chat_id)
        username = f"@{user.username}" if user.username else user.first_name
        msg = messages.get(username, f"{username}, –ø–æ—Ä–∞ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–æ–µ.")
        context.bot.send_message(chat_id=chat_id, text=msg)

# –ó–∞–ø—É—Å–∫

def main():
    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("stop", stop))
    dispatcher.add_handler(CallbackQueryHandler(button_callback))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: send_morning_messages(None), 'cron', hour=10, minute=0, timezone=TZ)
    scheduler.start()

    updater.start_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        url_path=TOKEN,
        webhook_url=f"https://prodazhnik-bot.onrender.com/{TOKEN}"
    )

if __name__ == '__main__':
    main()


